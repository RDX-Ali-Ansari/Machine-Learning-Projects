# -*- coding: utf-8 -*-
"""Logistic Regression.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_8iNPLmZu7SrRInIm4oKzQAN9Z9zBcp8
"""

import pandas as pd
import numpy as np

df = pd.read_csv('Social_Network_Ads.csv')
df.head()

"""### Handling Null Values"""

df.isnull().sum()

"""### Data Visulization"""

import matplotlib.pyplot as plt
import seaborn as sns
plt.figure(figsize = (10, 6))
plt.subplot(1, 2, 1)
df['EstimatedSalary'].plot(kind = 'kde')
plt.subplot(1, 2, 2)
df['Age'].plot(kind = 'kde')

plt.figure(figsize = (10,6))
plt.subplot(1,2,1)
sns.scatterplot(x=df['Age'],y=df['EstimatedSalary'])
plt.subplot(1,2,2)
sns.boxplot(df['Age'])
plt.figure(figsize = (10,6))
plt.subplot(2,2,1)
sns.boxplot(df['EstimatedSalary'])

"""### Preprocessing"""

num_features = ['Age', 'EstimatedSalary']
cat_features = ['Gender']

from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import StandardScaler, OneHotEncoder
preprocessor = ColumnTransformer([
    ('std_scaler', StandardScaler(), num_features),
    ('one_hot', OneHotEncoder(), cat_features)
])

X = df.drop(columns = ['Purchased', 'User ID'], axis = 1)
y = df['Purchased']

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 42)

from sklearn.pipeline import Pipeline
from sklearn.linear_model import LogisticRegression
pipe = Pipeline(steps = [
    ('preprocessor', preprocessor),
    ('classifier', LogisticRegression())
])

pipe.fit(X_train, y_train)

ypred = pipe.predict(X_test)

from sklearn.metrics import confusion_matrix, f1_score
print("Confusion Matrix: \n", confusion_matrix(y_test, ypred))
print("F1 Score: ", f1_score(y_test, ypred))

def sigmoid(x):
  return 1/(1+np.exp(-x))

class LGGD:
  def __init__(self, lr, epochs):
    self.lr = lr
    self.epochs = epochs
    self.coef_ = None
    self.intercept_ = None

  def fit(self, X_train, y_train):

    X_train = np.insert(X_train, 0, 1, axis = 1)
    self.intercept_ = 0
    self.coef_ = np.ones(X_train.shape[1])

    for i in range(self.epochs):
      y_hat = sigmoid(np.dot(X_train,self.coef_))
      self.coef_ = self.coef_ + self.lr*(np.dot((y-y_hat),X_train)/X_train.shape[0])

  def predict(self, X_test):
    return sigmoid(np.dot(X_test, self.coef_))

lggd = LGGD(0.1, 1000)

lggd.fit(X_train, y_train)

